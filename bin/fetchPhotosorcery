#!/usr/bin/env node
/* eslint-disable no-console, import/no-extraneous-dependencies */
const path = require('path')
const fs = require('fs-extra')
const glob = require('glob')
const chalk = require('chalk')

const DEFAULT_BINARY_DIR = `${process.env.GOPATH}/src/github.com/dawnlabs/photosorcery`
const PHOTOSORCERY_DIR = path.join(__dirname, 'photosorcery')
const BINARY_IDENTIFIER = 'amd64'
const BINARY_DELIMITER = '-'
const BINARY_GLOB = `*${BINARY_IDENTIFIER}*`

execute(process.argv[2] || DEFAULT_BINARY_DIR)
  .then(() => console.log(chalk.green('Success: Files fetched.')))
  .catch(console.error)

async function execute (dir) {
  await copyBinaries(dir)
  await renameBinaries()
}

async function copyBinaries (dir) {
  const copyGlob = path.join(dir, BINARY_GLOB)
  const filesToCopy = glob.sync(copyGlob)

  filesToCopy.forEach(async (filename) => {
    await fs.copyFile(filename, path.join(PHOTOSORCERY_DIR, path.basename(filename)))
  })
}

async function renameBinaries () {
  const files = await fs.readdir(PHOTOSORCERY_DIR)
  const filesToRename = files.filter(filename => filename.includes(BINARY_IDENTIFIER))

  filesToRename.forEach(async (file) => {
    const normalizedFilename = removeFilenamePeriods(file)
    const parts = path.parse(normalizedFilename)
    const trimmedName = parts.name.split(BINARY_DELIMITER).slice(0, 2).join('-')
    const newFile = `${trimmedName}${parts.ext}`

    await fs.rename(path.join(PHOTOSORCERY_DIR, file), path.join(PHOTOSORCERY_DIR, newFile))
  })
}

function removeFilenamePeriods (filename) {
  const EXE_FLAG = filename.includes('.exe')

  let formatted = filename
  if (EXE_FLAG) {
    formatted = filename.slice(0, filename.length - 4)
  }

  formatted = filename.split('.').join('')

  if (EXE_FLAG) {
    formatted = `${filename}.exe`
  }

  return formatted
}
